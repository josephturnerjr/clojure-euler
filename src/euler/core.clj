(ns euler.core
  (:gen-class)
  (:use clojure.set))

(defn pow
    [x p]
    (reduce * (repeat p x)))
(defn square
    [x]
    (pow x 2))
(defn sum
    [coll]
    (apply + coll))
(defn product
    [coll]
    (apply * coll))
(defn gcd
    [x y]
    (if (= y 0)
        x
        (recur y (mod x y))))

(def lazy-fib
    (map first
        (iterate
            (fn [[a b]] [b (+ a b)]) [0N 1N])))

(defn get-digits
    [n]
    (map #(Integer/parseInt (str %)) (seq (str n))))

(defn is-palindrome?
    [n]
    (def str-n (seq (str n)))
    (= str-n (reverse str-n)))

(defn divisor?
    [c n]
    (if (== c 1)
        false
        (= 0 (mod n c))))

(defn factorial
    [n]
    (defn fact-iter
        [n acc]
        (if (= n 1)
            acc
            (recur (- n 1) (* acc n))))
    (fact-iter n 1N))

(defn any-divisor?
    [coll n]
    (some #(divisor? % n) coll))

(def lazy-primes
    (map #(last (first %))
        (drop 1 (iterate
            (fn [[primes coll]]
                [
                    (conj primes (first coll))
                    (drop-while
                        #(any-divisor? primes %)
                        (rest coll))
                ]) 
            [[] (drop 2 (range))]))))

(def lazy-primes-so
    (map #(first %)
        (drop 1
            (iterate
                (fn [[prime coll]]
                    [
                        (first coll)
                        (filter
                            #(not (divisor? (first coll) %))
                            (rest coll))
                    ]) 
                [2 (drop 3 (range))]))))

(defn sieve
    [maximum]
    (def candidates (apply sorted-set (range 3 maximum 2)))
    (defn get-primes
        [candidates primes]
        (if (empty? candidates)
            primes
            (let [prime (first candidates)]
                (recur (difference candidates (set (range prime maximum prime))) (conj primes prime)))))
    (get-primes candidates [2]))
    

(defn naive-factor
    [n]
    (if (= n 1)
        nil
        (let [factor (first (drop-while #(not (divisor? % n)) (drop-while #(< % 2) (range))))]
            (conj (naive-factor (/ n factor)) factor))))

(defn factors
    [n]
    (set (naive-factor n)))

(defn totient
    [n]
    (* n
        (product
            (map #(- 1 (/ 1 %)) (factors n)))))

(defn problem-1
    []
    (defn is-mult? [x]
        (or
            (= (mod x 3) 0)
            (= (mod x 5) 0)))
    (sum (for [i (range 1000) :when (is-mult? i)] i)
    ))

(defn problem-2
    []
    ; old way
    ;(defn fib
    ;    [a b max]
    ;    (if (< b max)
    ;        (conj (fib b (+ a b) max) b)
    ;        nil
    ;    )
    ;)
    ; (apply + (filter even? (fib 0 1 4000000))))

    ; new hotness
    (sum (filter even? (take-while #(< % 4000000) lazy-fib))))

(defn problem-25
    []
    (defn digits
        [n]
        (count (str n)))
    (first (first (drop-while
                #(< (digits (second %)) 1000)
                (map vector (range) lazy-fib)))))

(defn problem-3
    []
    (apply max (naive-factor 600851475143)))

(defn problem-4
    []
    (apply max
        (for [x (range 100 1000) y (range x 1000) :when (is-palindrome? (* x y))]
             (* x y))))

(defn problem-5
    []
    (defn lcm
        [numbers]
        (if (empty? numbers)
            nil
            (let [current (first numbers)]
            (conj (lcm (map #(if (divisor? current %) (/ % current) %)
                                    (filter #(not= 1 %)
                                            (rest numbers)))) current)
            )))
            
    (product (lcm (range 2 20))))

(defn problem-6
    []
    (- (square (sum (range 101)))
       (sum (map square (range 101)))))

(defn problem-7
    []
    (nth lazy-primes 10000))

(defn problem-8
    []
    (def digs (seq "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450")) 
    (defn get-digits
        [digs]
        (if (< (count digs) 5)
            nil
            (cons (map #(Integer/parseInt (str %)) (take 5 digs)) (get-digits (rest digs)))))
    (apply max (map product (get-digits digs))))

(defn problem-10
    []
    (sum (sieve 2000000)))

(defn problem-13
    []
    (def nums [
37107287533902102798797998220837590246510135740250N
46376937677490009712648124896970078050417018260538N
74324986199524741059474233309513058123726617309629N
91942213363574161572522430563301811072406154908250N
23067588207539346171171980310421047513778063246676N
89261670696623633820136378418383684178734361726757N
28112879812849979408065481931592621691275889832738N
44274228917432520321923589422876796487670272189318N
47451445736001306439091167216856844588711603153276N
70386486105843025439939619828917593665686757934951N
62176457141856560629502157223196586755079324193331N
64906352462741904929101432445813822663347944758178N
92575867718337217661963751590579239728245598838407N
58203565325359399008402633568948830189458628227828N
80181199384826282014278194139940567587151170094390N
35398664372827112653829987240784473053190104293586N
86515506006295864861532075273371959191420517255829N
71693888707715466499115593487603532921714970056938N
54370070576826684624621495650076471787294438377604N
53282654108756828443191190634694037855217779295145N
36123272525000296071075082563815656710885258350721N
45876576172410976447339110607218265236877223636045N
17423706905851860660448207621209813287860733969412N
81142660418086830619328460811191061556940512689692N
51934325451728388641918047049293215058642563049483N
62467221648435076201727918039944693004732956340691N
15732444386908125794514089057706229429197107928209N
55037687525678773091862540744969844508330393682126N
18336384825330154686196124348767681297534375946515N
80386287592878490201521685554828717201219257766954N
78182833757993103614740356856449095527097864797581N
16726320100436897842553539920931837441497806860984N
48403098129077791799088218795327364475675590848030N
87086987551392711854517078544161852424320693150332N
59959406895756536782107074926966537676326235447210N
69793950679652694742597709739166693763042633987085N
41052684708299085211399427365734116182760315001271N
65378607361501080857009149939512557028198746004375N
35829035317434717326932123578154982629742552737307N
94953759765105305946966067683156574377167401875275N
88902802571733229619176668713819931811048770190271N
25267680276078003013678680992525463401061632866526N
36270218540497705585629946580636237993140746255962N
24074486908231174977792365466257246923322810917141N
91430288197103288597806669760892938638285025333403N
34413065578016127815921815005561868836468420090470N
23053081172816430487623791969842487255036638784583N
11487696932154902810424020138335124462181441773470N
63783299490636259666498587618221225225512486764533N
67720186971698544312419572409913959008952310058822N
95548255300263520781532296796249481641953868218774N
76085327132285723110424803456124867697064507995236N
37774242535411291684276865538926205024910326572967N
23701913275725675285653248258265463092207058596522N
29798860272258331913126375147341994889534765745501N
18495701454879288984856827726077713721403798879715N
38298203783031473527721580348144513491373226651381N
34829543829199918180278916522431027392251122869539N
40957953066405232632538044100059654939159879593635N
29746152185502371307642255121183693803580388584903N
41698116222072977186158236678424689157993532961922N
62467957194401269043877107275048102390895523597457N
23189706772547915061505504953922979530901129967519N
86188088225875314529584099251203829009407770775672N
11306739708304724483816533873502340845647058077308N
82959174767140363198008187129011875491310547126581N
97623331044818386269515456334926366572897563400500N
42846280183517070527831839425882145521227251250327N
55121603546981200581762165212827652751691296897789N
32238195734329339946437501907836945765883352399886N
75506164965184775180738168837861091527357929701337N
62177842752192623401942399639168044983993173312731N
32924185707147349566916674687634660915035914677504N
99518671430235219628894890102423325116913619626622N
73267460800591547471830798392868535206946944540724N
76841822524674417161514036427982273348055556214818N
97142617910342598647204516893989422179826088076852N
87783646182799346313767754307809363333018982642090N
10848802521674670883215120185883543223812876952786N
71329612474782464538636993009049310363619763878039N
62184073572399794223406235393808339651327408011116N
66627891981488087797941876876144230030984490851411N
60661826293682836764744779239180335110989069790714N
85786944089552990653640447425576083659976645795096N
66024396409905389607120198219976047599490197230297N
64913982680032973156037120041377903785566085089252N
16730939319872750275468906903707539413042652315011N
94809377245048795150954100921645863754710598436791N
78639167021187492431995700641917969777599028300699N
15368713711936614952811305876380278410754449733078N
40789923115535562561142322423255033685442488917353N
44889911501440648020369068063960672322193204149535N
41503128880339536053299340368006977710650566631954N
81234880673210146739058568557934581403627822703280N
82616570773948327592232845941706525094512325230608N
22918802058777319719839450180888072429661980811197N
77158542502016545090413245809786882778948721859617N
72107838435069186155435662884062257473692284509516N
20849603980134001723930671666823555245252804609722N
53503534226472524250874054075591789781264330331690N])
    (take 10 (str (sum nums))))
(defn problem-16
    []
    (sum (get-digits (pow 2N 1000))))

(defn problem-20
    []
    (sum (get-digits (factorial 100))))

(defn problem-48
    []
    (take-last 10 (get-digits (sum (map #(pow (bigint %) %) (range 1 1001))))))

(defn problem-69
    []
    (def biggest 2000000)
    (loop [primes lazy-primes acc 1]
          (let [prime (first primes)]
               (if (> (* acc prime) biggest)
                  acc
                  (recur (rest primes) (* acc prime))))))

(defn -main
  [& args]
  ;(println "Problem 1:" (time (problem-1)))
  ;(println "Problem 2:" (time (problem-2)))
  ;(println "Problem 3:" (time (problem-3)))
  ;(println "Problem 4:" (time (problem-4)))
  ;(println "Problem 5:" (time (problem-5)))
  ;(println "Problem 6:" (time (problem-6)))
  ;(println "Problem 7:" (time (problem-7)))
  ;(println "Problem 8:" (time (problem-8)))
  ;(println "Problem 10:" (time (problem-10)))
  ;(println "Problem 13: " (time (problem-13)))
  ;(println "Problem 16: " (time (problem-16)))
  ;(println "Problem 20: " (time (problem-20)))
  ;(println "Problem 25:" (time (problem-25)))
  ;(println "Problem 48:" (time (problem-48)))
  (println "Problem 69:" (time (problem-69)))
)
